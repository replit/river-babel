// Code generated by tools/codegen.ts, DO NOT EDIT.
import { RiverUncaughtSchema } from "../../node_modules/@replit/river/dist/router/result";
import { ServiceBuilder } from "../../node_modules/@replit/river/dist/router/builder";
import { Type } from "@sinclair/typebox";

export enum RpcEnum {
  ZERO = 0,
  ONE = 1,
  TWO = 2,
}
const _RpcEnum_EnumType = Type.Enum(RpcEnum);

export const RpcMessage = Type.Object({
  payload: Type.String(),
});

export const RpcRequest = Type.Object({
  request: Type.Union([
    Type.Object({
      $kind: Type.Literal("double"),
      double: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("float"),
      float: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("int64"),
      int64: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("uint64"),
      uint64: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("int32"),
      int32: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("fixed64"),
      fixed64: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("fixed32"),
      fixed32: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("bool"),
      bool: Type.Boolean(),
    }),
    Type.Object({
      $kind: Type.Literal("string"),
      string: Type.String(),
    }),
    /**
     * No group.
     */
    Type.Object({
      $kind: Type.Literal("message"),
      message: RpcMessage,
    }),
    Type.Object({
      $kind: Type.Literal("bytes"),
      bytes: Type.Uint8Array(),
    }),
    Type.Object({
      $kind: Type.Literal("uint32"),
      uint32: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("enum"),
      enum: _RpcEnum_EnumType,
    }),
    Type.Object({
      $kind: Type.Literal("sfixed32"),
      sfixed32: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("sfixed64"),
      sfixed64: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("sint32"),
      sint32: Type.Number(),
    }),
    Type.Object({
      $kind: Type.Literal("sint64"),
      sint64: Type.Number(),
    }),
  ]),
});

export const RpcResponse = Type.Object({
  payload: Type.String(),
});

export const StreamRequest = Type.Object({
  /**
   * TODO: timestamp is causing grpc generated files fail in tests.
   * google.protobuf.Timestamp timestamp = 1;
   */
  payload: Type.String(),
});

export const StreamResponse = Type.Object({
  /**
   * google.protobuf.Timestamp timestamp = 1;
   */
  payload: Type.String(),
});

export const TestServiceConstructor = () =>
  ServiceBuilder.create("test")
    .defineProcedure("rpc", {
      input: RpcRequest,
      output: RpcResponse,
      errors: RiverUncaughtSchema,
      type: "rpc",
      async handler(_ctx: unknown, msg) {
        // This is a stub declared in gRPC
        return {
          ...msg,
          payload: {
            ok: false,
            payload: { code: "UNCAUGHT_ERROR", message: "Unimplemented" },
          },
        };
      },
    })
    .defineProcedure("stream", {
      input: StreamRequest,
      output: StreamResponse,
      errors: RiverUncaughtSchema,
      type: "stream",
      async handler(
        _ctx: unknown,
        _msgStream: unknown,
        _returnStream: unknown,
      ): Promise<void> {
        // This is a stub declared in gRPC
        throw new Error("unimplemented");
      },
    })
    .finalize();
