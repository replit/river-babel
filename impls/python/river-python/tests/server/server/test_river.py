# type: ignore
# Code generated by river.codegen. DO NOT EDIT.
from typing import Any, Dict, Mapping, Tuple

import river

from . import test_pb2, test_pb2_grpc


def _RpcMessageEncoder(e: test_pb2.RpcMessage) -> Dict[str, Any]:
    d: Dict[str, Any] = {}
    _payload = getattr(e, "payload", None)
    if _payload is not None:
        d["payload"] = _payload
    return d


def _RpcMessageDecoder(
    d: Mapping[str, Any],
) -> test_pb2.RpcMessage:
    m = test_pb2.RpcMessage()
    if d is None:
        return m
    if d.get("payload") is not None:
        setattr(m, "payload", d["payload"])
    return m


def _RpcRequestEncoder(e: test_pb2.RpcRequest) -> Dict[str, Any]:
    d: Dict[str, Any] = {}
    match e.WhichOneof("request"):
        case "double":
            d["request"] = {
                "$kind": "double",
                "double": getattr(e, "double", None),
            }
        case "float":
            d["request"] = {
                "$kind": "float",
                "float": getattr(e, "float", None),
            }
        case "int64":
            d["request"] = {
                "$kind": "int64",
                "int64": getattr(e, "int64", None),
            }
        case "uint64":
            d["request"] = {
                "$kind": "uint64",
                "uint64": getattr(e, "uint64", None),
            }
        case "int32":
            d["request"] = {
                "$kind": "int32",
                "int32": getattr(e, "int32", None),
            }
        case "fixed64":
            d["request"] = {
                "$kind": "fixed64",
                "fixed64": getattr(e, "fixed64", None),
            }
        case "fixed32":
            d["request"] = {
                "$kind": "fixed32",
                "fixed32": getattr(e, "fixed32", None),
            }
        case "bool":
            d["request"] = {
                "$kind": "bool",
                "bool": getattr(e, "bool", None),
            }
        case "string":
            d["request"] = {
                "$kind": "string",
                "string": getattr(e, "string", None),
            }
        case "message":
            d["request"] = {
                "$kind": "message",
                "message": _RpcMessageEncoder(getattr(e, "message", None)),
            }
        case "bytes":
            d["request"] = {
                "$kind": "bytes",
                "bytes": getattr(e, "bytes", None),
            }
        case "uint32":
            d["request"] = {
                "$kind": "uint32",
                "uint32": getattr(e, "uint32", None),
            }
        case "enum":
            d["request"] = {
                "$kind": "enum",
                "enum": getattr(e, "enum", None),
            }
        case "sfixed32":
            d["request"] = {
                "$kind": "sfixed32",
                "sfixed32": getattr(e, "sfixed32", None),
            }
        case "sfixed64":
            d["request"] = {
                "$kind": "sfixed64",
                "sfixed64": getattr(e, "sfixed64", None),
            }
        case "sint32":
            d["request"] = {
                "$kind": "sint32",
                "sint32": getattr(e, "sint32", None),
            }
        case "sint64":
            d["request"] = {
                "$kind": "sint64",
                "sint64": getattr(e, "sint64", None),
            }
    return d


def _RpcRequestDecoder(
    d: Mapping[str, Any],
) -> test_pb2.RpcRequest:
    m = test_pb2.RpcRequest()
    if d is None:
        return m
    _request = d.get("request", {})
    match _request.get("$kind", None):
        case "double":
            setattr(
                m,
                "double",
                _request["double"],
            )
        case "float":
            setattr(
                m,
                "float",
                _request["float"],
            )
        case "int64":
            setattr(
                m,
                "int64",
                _request["int64"],
            )
        case "uint64":
            setattr(
                m,
                "uint64",
                _request["uint64"],
            )
        case "int32":
            setattr(
                m,
                "int32",
                _request["int32"],
            )
        case "fixed64":
            setattr(
                m,
                "fixed64",
                _request["fixed64"],
            )
        case "fixed32":
            setattr(
                m,
                "fixed32",
                _request["fixed32"],
            )
        case "bool":
            setattr(
                m,
                "bool",
                _request["bool"],
            )
        case "string":
            setattr(
                m,
                "string",
                _request["string"],
            )
        case "message":
            m.message.MergeFrom(_RpcMessageDecoder(_request["message"]))
        case "bytes":
            setattr(
                m,
                "bytes",
                _request["bytes"],
            )
        case "uint32":
            setattr(
                m,
                "uint32",
                _request["uint32"],
            )
        case "enum":
            setattr(
                m,
                "enum",
                _request["enum"],
            )
        case "sfixed32":
            setattr(
                m,
                "sfixed32",
                _request["sfixed32"],
            )
        case "sfixed64":
            setattr(
                m,
                "sfixed64",
                _request["sfixed64"],
            )
        case "sint32":
            setattr(
                m,
                "sint32",
                _request["sint32"],
            )
        case "sint64":
            setattr(
                m,
                "sint64",
                _request["sint64"],
            )
    return m


def _RpcResponseEncoder(e: test_pb2.RpcResponse) -> Dict[str, Any]:
    d: Dict[str, Any] = {}
    _payload = getattr(e, "payload", None)
    if _payload is not None:
        d["payload"] = _payload
    return d


def _RpcResponseDecoder(
    d: Mapping[str, Any],
) -> test_pb2.RpcResponse:
    m = test_pb2.RpcResponse()
    if d is None:
        return m
    if d.get("payload") is not None:
        setattr(m, "payload", d["payload"])
    return m


def _StreamRequestEncoder(e: test_pb2.StreamRequest) -> Dict[str, Any]:
    d: Dict[str, Any] = {}
    _payload = getattr(e, "payload", None)
    if _payload is not None:
        d["payload"] = _payload
    return d


def _StreamRequestDecoder(
    d: Mapping[str, Any],
) -> test_pb2.StreamRequest:
    m = test_pb2.StreamRequest()
    if d is None:
        return m
    if d.get("payload") is not None:
        setattr(m, "payload", d["payload"])
    return m


def _StreamResponseEncoder(e: test_pb2.StreamResponse) -> Dict[str, Any]:
    d: Dict[str, Any] = {}
    _payload = getattr(e, "payload", None)
    if _payload is not None:
        d["payload"] = _payload
    return d


def _StreamResponseDecoder(
    d: Mapping[str, Any],
) -> test_pb2.StreamResponse:
    m = test_pb2.StreamResponse()
    if d is None:
        return m
    if d.get("payload") is not None:
        setattr(m, "payload", d["payload"])
    return m


def add_TestServicer_to_server(
    servicer: test_pb2_grpc.TestServicer,
    server: river.Server,
) -> None:
    rpc_method_handlers: Mapping[
        Tuple[str, str], Tuple[str, river.GenericRpcHandler]
    ] = {
        ("test", "rpc"): (
            "rpc",
            river.rpc_method_handler(
                servicer.rpc,
                _RpcRequestDecoder,
                _RpcResponseEncoder,
            ),
        ),
        ("test", "stream"): (
            "stream",
            river.stream_method_handler(
                servicer.stream,
                _StreamRequestDecoder,
                _StreamResponseEncoder,
            ),
        ),
    }
    server.add_rpc_handlers(rpc_method_handlers)
