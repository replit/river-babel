"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
import "google/protobuf/timestamp.proto";"""

import abc
import collections.abc
import typing

import grpc
import grpc.aio

from . import test_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class TestStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    rpc: grpc.UnaryUnaryMultiCallable[
        test_pb2.RpcRequest,
        test_pb2.RpcResponse,
    ]
    stream: grpc.StreamStreamMultiCallable[
        test_pb2.StreamRequest,
        test_pb2.StreamResponse,
    ]

class TestAsyncStub:
    rpc: grpc.aio.UnaryUnaryMultiCallable[
        test_pb2.RpcRequest,
        test_pb2.RpcResponse,
    ]
    stream: grpc.aio.StreamStreamMultiCallable[
        test_pb2.StreamRequest,
        test_pb2.StreamResponse,
    ]

class TestServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def rpc(
        self,
        request: test_pb2.RpcRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        test_pb2.RpcResponse, collections.abc.Awaitable[test_pb2.RpcResponse]
    ]: ...
    @abc.abstractmethod
    def stream(
        self,
        request_iterator: _MaybeAsyncIterator[test_pb2.StreamRequest],
        context: _ServicerContext,
    ) -> typing.Union[
        collections.abc.Iterator[test_pb2.StreamResponse],
        collections.abc.AsyncIterator[test_pb2.StreamResponse],
    ]: ...

def add_TestServicer_to_server(
    servicer: TestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
