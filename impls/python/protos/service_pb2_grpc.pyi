"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
import "google/protobuf/timestamp.proto";"""

import abc
import collections.abc
import grpc
import grpc.aio
import service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TestStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    set: grpc.UnaryUnaryMultiCallable[
        service_pb2.KVRequest,
        service_pb2.KVResponse,
    ]

    watch: grpc.UnaryStreamMultiCallable[
        service_pb2.KVRequest,
        service_pb2.KVResponse,
    ]

    echo: grpc.StreamStreamMultiCallable[
        service_pb2.EchoInput,
        service_pb2.EchoOutput,
    ]

    upload: grpc.StreamUnaryMultiCallable[
        service_pb2.EchoInput,
        service_pb2.EchoOutput,
    ]
    """TODO: enable this once python river server support init
    rpc echo_prefix (stream EchoInput) returns (stream EchoOutput);
    """

class TestAsyncStub:
    set: grpc.aio.UnaryUnaryMultiCallable[
        service_pb2.KVRequest,
        service_pb2.KVResponse,
    ]

    watch: grpc.aio.UnaryStreamMultiCallable[
        service_pb2.KVRequest,
        service_pb2.KVResponse,
    ]

    echo: grpc.aio.StreamStreamMultiCallable[
        service_pb2.EchoInput,
        service_pb2.EchoOutput,
    ]

    upload: grpc.aio.StreamUnaryMultiCallable[
        service_pb2.EchoInput,
        service_pb2.EchoOutput,
    ]
    """TODO: enable this once python river server support init
    rpc echo_prefix (stream EchoInput) returns (stream EchoOutput);
    """

class TestServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def set(
        self,
        request: service_pb2.KVRequest,
        context: _ServicerContext,
    ) -> typing.Union[service_pb2.KVResponse, collections.abc.Awaitable[service_pb2.KVResponse]]: ...

    @abc.abstractmethod
    def watch(
        self,
        request: service_pb2.KVRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[service_pb2.KVResponse], collections.abc.AsyncIterator[service_pb2.KVResponse]]: ...

    @abc.abstractmethod
    def echo(
        self,
        request_iterator: _MaybeAsyncIterator[service_pb2.EchoInput],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[service_pb2.EchoOutput], collections.abc.AsyncIterator[service_pb2.EchoOutput]]: ...

    @abc.abstractmethod
    def upload(
        self,
        request_iterator: _MaybeAsyncIterator[service_pb2.EchoInput],
        context: _ServicerContext,
    ) -> typing.Union[service_pb2.EchoOutput, collections.abc.Awaitable[service_pb2.EchoOutput]]:
        """TODO: enable this once python river server support init
        rpc echo_prefix (stream EchoInput) returns (stream EchoOutput);
        """

def add_TestServicer_to_server(servicer: TestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
