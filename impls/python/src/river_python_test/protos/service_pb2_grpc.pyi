"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
import "google/protobuf/timestamp.proto";"""

import abc
import collections.abc
import grpc
import grpc.aio
import river_python_test.protos.service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class kvStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    set: grpc.UnaryUnaryMultiCallable[
        river_python_test.protos.service_pb2.KVRequest,
        river_python_test.protos.service_pb2.KVResponse,
    ]

    watch: grpc.UnaryStreamMultiCallable[
        river_python_test.protos.service_pb2.KVRequest,
        river_python_test.protos.service_pb2.KVResponse,
    ]

class kvAsyncStub:
    set: grpc.aio.UnaryUnaryMultiCallable[
        river_python_test.protos.service_pb2.KVRequest,
        river_python_test.protos.service_pb2.KVResponse,
    ]

    watch: grpc.aio.UnaryStreamMultiCallable[
        river_python_test.protos.service_pb2.KVRequest,
        river_python_test.protos.service_pb2.KVResponse,
    ]

class kvServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def set(
        self,
        request: river_python_test.protos.service_pb2.KVRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        river_python_test.protos.service_pb2.KVResponse,
        collections.abc.Awaitable[river_python_test.protos.service_pb2.KVResponse],
    ]: ...
    @abc.abstractmethod
    def watch(
        self,
        request: river_python_test.protos.service_pb2.KVRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        collections.abc.Iterator[river_python_test.protos.service_pb2.KVResponse],
        collections.abc.AsyncIterator[river_python_test.protos.service_pb2.KVResponse],
    ]: ...

def add_kvServicer_to_server(
    servicer: kvServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...

class repeatStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    echo: grpc.StreamStreamMultiCallable[
        river_python_test.protos.service_pb2.EchoInput,
        river_python_test.protos.service_pb2.EchoOutput,
    ]

class repeatAsyncStub:
    echo: grpc.aio.StreamStreamMultiCallable[
        river_python_test.protos.service_pb2.EchoInput,
        river_python_test.protos.service_pb2.EchoOutput,
    ]

class repeatServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def echo(
        self,
        request_iterator: _MaybeAsyncIterator[
            river_python_test.protos.service_pb2.EchoInput
        ],
        context: _ServicerContext,
    ) -> typing.Union[
        collections.abc.Iterator[river_python_test.protos.service_pb2.EchoOutput],
        collections.abc.AsyncIterator[river_python_test.protos.service_pb2.EchoOutput],
    ]: ...

def add_repeatServicer_to_server(
    servicer: repeatServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...

class uploadStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    send: grpc.StreamUnaryMultiCallable[
        river_python_test.protos.service_pb2.UploadInput,
        river_python_test.protos.service_pb2.UploadOutput,
    ]

class uploadAsyncStub:
    send: grpc.aio.StreamUnaryMultiCallable[
        river_python_test.protos.service_pb2.UploadInput,
        river_python_test.protos.service_pb2.UploadOutput,
    ]

class uploadServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def send(
        self,
        request_iterator: _MaybeAsyncIterator[
            river_python_test.protos.service_pb2.UploadInput
        ],
        context: _ServicerContext,
    ) -> typing.Union[
        river_python_test.protos.service_pb2.UploadOutput,
        collections.abc.Awaitable[river_python_test.protos.service_pb2.UploadOutput],
    ]: ...

def add_uploadServicer_to_server(
    servicer: uploadServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
