# Code generated by river.codegen. DO NOT EDIT.
import datetime
from collections.abc import AsyncIterable, AsyncIterator  # noqa: F401
from typing import Any

import replit_river as river
from pydantic import TypeAdapter  # noqa: F401
from replit_river.error_schema import RiverError, RiverErrorTypeAdapter

from .set import SetInput, SetInputTypeAdapter, SetOutput, SetOutputTypeAdapter
from .watch import (
    WatchErrors,
    WatchErrorsTypeAdapter,
    WatchInput,
    WatchInputTypeAdapter,
    WatchOutput,
    WatchOutputTypeAdapter,
)


class KvService:
    def __init__(self, client: river.Client[Any]):
        self.client = client

    async def set(
        self,
        input: SetInput,
        timeout: datetime.timedelta,
    ) -> SetOutput:
        return await self.client.send_rpc(
            "kv",
            "set",
            input,
            lambda x: SetInputTypeAdapter.dump_python(
                x,  # type: ignore[arg-type]
                by_alias=True,
                exclude_none=True,
            ),
            lambda x: SetOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: RiverErrorTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            timeout,
        )

    async def watch(
        self,
        input: WatchInput,
    ) -> AsyncIterator[WatchOutput | WatchErrors | RiverError]:
        return self.client.send_subscription(
            "kv",
            "watch",
            input,
            lambda x: WatchInputTypeAdapter.dump_python(
                x,  # type: ignore[arg-type]
                by_alias=True,
                exclude_none=True,
            ),
            lambda x: WatchOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: WatchErrorsTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
        )
